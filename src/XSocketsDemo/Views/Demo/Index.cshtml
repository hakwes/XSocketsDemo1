@{
    ViewBag.Title = "Index";
}
@{
    if (false)
    {
        //Will never happend in runtime. Only for import to get intellisense
    <link rel="stylesheet" type="text/css" href="/bootstrap/css/bootstrap-responsive.css" />
    <link href="/bootstrap/css/bootstrap.css" rel="stylesheet" type="text/css" />
    <script src="/Scripts/jquery-1.7.2.js" type="text/javascript"></script>
    <script src="/Scripts/json2.js" type="text/javascript"></script>
    <script src="/Scripts/jXSockets.2.0.0.js" type="text/javascript"></script>
    <script src="/Scripts/jXSockets.fallback.2.0.0.js" type="text/javascript"></script>
    <script src="/Scripts/knockout-2.1.0.debug.js" type="text/javascript"></script>    
    <script src="/bootstrap/js/bootstrap.js" type="text/javascript"></script>
    <script src="/Scripts/moment.js" type="text/javascript"></script>
    }
}
@section JavaScript{
    <script type="text/javascript">

        //KnockoutJS - Our ViewModel
        var Person = function (id, name, age, gender, genderstring, colorid, color, fruitid, fruit) {
            this.Id = ko.observable(id);
            this.Name = ko.observable(name);
            this.Age = ko.observable(age);
            this.Gender = ko.observable(gender);
            this.GenderString = ko.observable(genderstring);
            this.FavoriteColorId = ko.observable(colorid);
            this.FavoriteColorName = ko.observable(color);
            this.FavoriteFruitId = ko.observable(fruitid);
            this.FavoriteFruitName = ko.observable(fruit);
        };
        var ViewModel = {
            People: ko.observableArray([]),
            Person: ko.observable(new Person()),
            AvailableColors: ko.observableArray([]),
            AvailableFruits: ko.observableArray([]),

            deletePerson: function (p) {
                //Set the viewmodel person to the one we want to delete...
                ViewModel.Person(p);

                //Get confirmation
                $("#personToDelete", "#ModalDeletePerson").text(p.Name());
                $('#ModalDeletePerson').modal('show');
            },
            editPerson: function (p) {
                //Set the viewmodel person to the one we want to edit
                ViewModel.Person(p);

                //Show editable modal
                $('#ModalUpdatePerson').modal('show');
            },

            //Charts Data
            GenderStats: {
                stacked: ko.observable(false),
                seriesList: ko.observableArray([{ legendEntry: false, data: { x: [], y: []}}])
            },

            ColorStats: {
                stacked: ko.observable(false),
                seriesList: ko.observableArray([{ legendEntry: false, data: { x: [], y: []}}])
            },

            FruitStats: {
                stacked: false,
                seriesList: ko.observableArray([{ legendEntry: false, data: { x: [], y: []}}])
            },

            //A hack for calculating chartdata...... but... ;)
            CalculateData: function () {

                //Calc gender and update viewmodel
                ViewModel.GenderStats.seriesList([{ legendEntry: false, data: { x: ['Female', 'Male'], y: [$.grep(ViewModel.People(), function (n, i) { return (n.GenderString() === "Female"); }).length, $.grep(ViewModel.People(), function (n, i) { return (n.GenderString() === "Male"); }).length]}}]);

                var colorData = { x: [], y: [] };
                var fruitData = { x: [], y: [] };

                $.each(ViewModel.People(), function () {
                    //calc colors
                    if (colorData.x.indexOf(this.FavoriteColorName()) === -1) {
                        colorData.x.push(this.FavoriteColorName());
                        colorData.y[colorData.x.indexOf(this.FavoriteColorName())] = 1;
                    } else {
                        colorData.y[colorData.x.indexOf(this.FavoriteColorName())]++;
                    }
                    //calc ffruits
                    if (fruitData.x.indexOf(this.FavoriteFruitName()) === -1) {
                        fruitData.x.push(this.FavoriteFruitName());
                        fruitData.y[fruitData.x.indexOf(this.FavoriteFruitName())] = 1;
                    } else {
                        fruitData.y[fruitData.x.indexOf(this.FavoriteFruitName())]++;
                    }
                });
                //Update ViewModel
                ViewModel.ColorStats.seriesList([{ legendEntry: false, data: colorData}]);
                ViewModel.FruitStats.seriesList([{ legendEntry: false, data: fruitData}]);
            }
        };

        //Commands that mirror the once in the plugin (for less strings)
        var Commands = {
            Person: {
                Binding: {
                    GetAll: 'Person.Trigger.GetAll',
                    Created: 'Person.Trigger.Created',
                    Updated: 'Person.Trigger.Updated',
                    Deleted: 'Person.Trigger.Deleted'
                },
                Trigger: {
                    GetAll: 'Person.Bind.GetAll',
                    Create: 'Person.Bind.Create',
                    Update: 'Person.Bind.Update',
                    Delete: 'Person.Bind.Delete'
                }
            },
            Color: {
                Binding: {
                    GetAll: 'Color.Trigger.GetAll'
                }
            },
            Fruit: {
                Binding: {
                    GetAll: 'Fruit.Trigger.GetAll'
                }
            },
            Global: {
                Trigger: {
                    Init: 'Global.Bind.Init'
                }
            }
        };

        var ws = null;
        //Doc Ready
        $(function () {
            //Bind/Enable knockout
            ko.applyBindings(ViewModel);

            //Create a connection to our DemoController/Plugin in XSockets
            ws = new XSockets.WebSocket("ws://127.0.0.1:4502/DemoController", "DemoController");

            //Listen for the open event
            ws.bind(XSockets.Events.open, function (client) {
                writeToLog('XSockets.NET Open', 'The binding ' + XSockets.Events.open + ' was hit');

                //Listen for GetAllPeople
                ws.bind(Commands.Person.Binding.GetAll, function (people) {
                    //This will bind all people to knockout, and ko will render the information in our page         
                    $.each(people, function () {
                        ViewModel.People.push(new Person(this.Id, this.Name, this.Age, this.Gender, this.GenderString, this.FavoriteColorId, this.FavoriteColor.Name, this.FavoriteFruitId, this.FavoriteFruit.Name));
                    });
                    writeToLog('People Loaded', 'The binding ' + Commands.Person.Binding.GetAll + ' was hit');
                    ViewModel.CalculateData();
                });

                //Listen for GetAllFruits
                ws.bind(Commands.Fruit.Binding.GetAll, function (fruits) {
                    ViewModel.AvailableFruits(fruits);
                    writeToLog('Fruits Loaded', 'The binding ' + Commands.Fruit.Binding.GetAll + ' was hit');
                });

                //Listen for GetAllColors
                ws.bind(Commands.Color.Binding.GetAll, function (colors) {
                    ViewModel.AvailableColors(colors);
                    writeToLog('Colors Loaded', 'The binding ' + Commands.Color.Binding.GetAll + ' was hit');

                });

                //Listen for a new Person (when anyone creates it)
                ws.bind(Commands.Person.Binding.Created, function (person) {
                    ViewModel.People.unshift(new Person(person.Id, person.Name, person.Age, person.Gender, person.GenderString, person.FavoriteColorId, person.FavoriteColor.Name, person.FavoriteFruitId, person.FavoriteFruit.Name));
                    writeToLog('Person Created', 'The binding ' + Commands.Person.Binding.Created + ' was hit');
                    ViewModel.CalculateData();
                });

                //Listen for when a person was deleted (when anyone deletes it)
                ws.bind(Commands.Person.Binding.Deleted, function (person) {
                    ViewModel.People.remove(function (item) { return item.Id() === person.Id; });
                    writeToLog('Person Deleted', 'The binding ' + Commands.Person.Binding.Deleted + ' was hit');
                    ViewModel.CalculateData();
                });

                //Listen for when a person was updated (by anyone)
                ws.bind(Commands.Person.Binding.Updated, function (person) {

                    var found = ko.utils.arrayFirst(ViewModel.People(), function (p) {
                        return p.Id() === person.Id;
                    });

                    if (found) {
                        found.Name(person.Name);
                        found.Age(person.Age);
                        found.Gender(person.Gender);
                        found.GenderString(person.GenderString);
                        found.FavoriteColorId(person.FavoriteColorId);
                        found.FavoriteColorName(person.FavoriteColor.Name);
                        found.FavoriteFruitId(person.FavoriteFruitId);
                        found.FavoriteFruitName(person.FavoriteFruit.Name);

                        writeToLog('Person Updated', 'The binding ' + Commands.Person.Binding.Updated + ' was hit');
                        ViewModel.CalculateData();
                    }
                });

                //Trigger init that will collect people, fruits and colors
                ws.trigger(Commands.Global.Trigger.Init, {});
            });

            //If something goes wrong...
            ws.bind(XSockets.Events.onError, function (error) {

                $('#ModalAddPerson').modal('hide');

                $('#errorType', '#ModalError').text(error.Type);
                $('#errorMessage', '#ModalError').text(error.Message);
                $('#errorCustomMessage', '#ModalError').text(error.CustomMessage);
                $('#ModalError').modal('show');

                writeToLog('Error Occurred', 'The binding ' + XSockets.Events.onError + ' was hit');

            });


            ////////////////////////
            // GUI Events
            ////////////////////////
            $('#savePerson').live('click', function (e) {
                e.preventDefault();
                var json = {
                    Name: $('#addPersonName', '#ModalAddPerson').val(),
                    Age: parseInt($('#addPersonAge', '#ModalAddPerson').val()),
                    Gender: parseInt($('input:radio[name=gender]:checked', '#ModalAddPerson').val()),
                    FavoriteFruitId: parseInt($('#addPersonFruit', '#ModalAddPerson').val()),
                    FavoriteColorId: parseInt($('#addPersonColor', '#ModalAddPerson').val())
                };
                ws.trigger(Commands.Person.Trigger.Create, json);

                //Normally I would not do this until we got the result back, but now we do not have any validation
                //So I´ll close the dialog straight away.
                $('#ModalAddPerson').modal('hide');
            });

            $('#deletePerson').live('click', function (e) {
                e.preventDefault();
                var json = {
                    Id: ViewModel.Person().Id(),
                    Name: ViewModel.Person().Name(),
                    Age: ViewModel.Person().Age(),
                    Gender: ViewModel.Person().Gender(),
                    FavoriteFruitId: ViewModel.Person().FavoriteFruitId(),
                    FavoriteColorId: ViewModel.Person().FavoriteColorId()
                };
                ws.trigger(Commands.Person.Trigger.Delete, json);

                //Normally I would not do this until we got the result back, but now we do not have any validation
                //So I´ll close the dialog straight away.
                $('#ModalDeletePerson').modal('hide');
            });

            $('#updatePerson').live('click', function (e) {

                e.preventDefault();
                var json = {
                    Id: ViewModel.Person().Id(),
                    Name: ViewModel.Person().Name(),
                    Age: ViewModel.Person().Age(),
                    Gender: ViewModel.Person().Gender(),
                    FavoriteFruitId: ViewModel.Person().FavoriteFruitId(),
                    FavoriteColorId: ViewModel.Person().FavoriteColorId()
                };
                ws.trigger(Commands.Person.Trigger.Update, json);

                //Normally I would not do this until we got the result back, but now we do not have any validation
                //So I´ll close the dialog straight away.
                $('#ModalUpdatePerson').modal('hide');
            });

            $('#clearLog').bind('click', function () {
                $('#eventlog').empty();
            });

            $('.pop').bind('click', function() {
                $(this).popover('show');
            });
        });


        //EventLogWriter
        var writeToLog = function (headline, text) {
            var h = $("<h5>").text(headline);
            var p = $("<p>").text(text);
            var t = $("<span class='badge badge-inverse'>").text(moment().format('MMMM Do YYYY, h:mm:ss a'));
            $("<div class='well well-small'>").append(h).append(p).append(t).hide().prependTo($("#eventlog")).fadeIn();
        };
    </script>
}
<!-- Navbar
    ================================================== -->
<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container">
            <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar">
                </span>
            </button>
            <a class="brand" href="#">XSockets.NET</a>
        </div>
    </div>
</div>
<!-- Masthead ================================================== -->
<header style="padding-top: 60px;">
    <div class="container">
        <h1>
            XSockets.NET Demo</h1>
        <p class="lead">
            <a href="https://github.com/codeplanner/xsocketsdemo120926">Download Example</a>
            using Wijmo, KnockoutJS, EF CodeFirst, TwitterBootstrap and XSockets.NET</p>
    </div>
</header>
<div class="container">
    <!-- Wijmo/KnockoutJs - Charting ================================================== -->
    <div class="row">
        <div class="span4">
            <div class="well well-small" data-bind="wijbarchart: {header: { text: 'Gender' },width: 350, height: 200, header: GenderStats.header, stacked: GenderStats.stacked, seriesList: GenderStats.seriesList}">
            </div>
        </div>
        <div class="span4">
            <div class="well well-small" data-bind="wijbarchart: {header: { text: 'Fruits' },width: 350, height: 200, header: FruitStats.header, stacked: FruitStats.stacked, seriesList: FruitStats.seriesList}">
            </div>
        </div>
        <div class="span4">
            <div class="well well-small" data-bind="wijbarchart: {header: { text: 'Colors' },width: 350, height: 200, header: ColorStats.header, stacked: ColorStats.stacked, seriesList: ColorStats.seriesList}">
            </div>
        </div>
    </div>
    <!-- Main ================================================== -->
    <div class="row">
        <div class="span9">
            <a href="#ModalAddPerson" class="addPerson btn btn-mini btn-success" data-toggle="modal">
                Add Person</a> <a href="#" class="pop btn btn-mini btn-info" rel="popover" data-content="Look at the longrunning internal plugin! It ticks every 8 sec and randomly changes data in the DB"
                    data-original-title="This is why...">Why´s the data magically changing?</a>
        </div>
        <div class="span3">
            <h3 id="clearLog">
                Eventlog (click to clear)</h3>
        </div>
    </div>
    <div class="row">
        <div class="span9">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            Age
                        </th>
                        <th>
                            Gender
                        </th>
                        <th>
                            Favorite Color
                        </th>
                        <th>
                            Favorite Fruit
                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                </thead>
                <tbody data-bind="foreach:People">
                    <tr>
                        <td data-bind="text:Name">
                        </td>
                        <td data-bind="text:Age">
                        </td>
                        <td data-bind="text:GenderString">
                        </td>
                        <td data-bind="text:FavoriteColorName">
                        </td>
                        <td data-bind="text:FavoriteFruitName">
                        </td>
                        <td>
                            <a href="#" class="btn btn-mini btn-warning editPerson" data-bind="click: $parent.editPerson">
                                edit</a> <a href="#" class="btn btn-mini btn-danger deletePerson" data-bind="click: $parent.deletePerson">
                                    delete</a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="span3">
            <div id="eventlog">
            </div>
        </div>
    </div>
</div>
<footer class="footer">
    <div class="container">
        <div class="span12">
            <span class="pull-right">&copy; XSockets.NET 2012 </span>
        </div>
    </div>
</footer>
<!-- MODAL ADD PERSON //-->
<div class="modal hide fade form-horizontal" id="ModalAddPerson">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
            &times;</button>
        <h3>
            Add Person</h3>
    </div>
    <div class="modal-body">
        <div class="control-group">
            <label class="control-label" for="addPersonName">
                Name</label>
            <div class="controls">
                <input type="text" id="addPersonName" placeholder="Name" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="addPersonAge">
                Age</label>
            <div class="controls">
                <input type="number" id="addPersonAge" min="10" max="100" value="30" step="1" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="addPersonAge">
                Gender</label>
            <div class="controls">
                <label for="addPersonGenderMale">
                    Male</label><input type="radio" checked id="addPersonGenderMale" name="gender" value="0" />
                <label for="addPersonGenderFemale">
                    Female</label><input type="radio" id="addPersonGenderFemale" name="gender" value="1" />
            </div>
        </div>
        <div>
            <label class="control-label" for="addPersonColor">
                Color</label>
            <div class="controls">
                <select id="addPersonColor" data-bind="options: AvailableColors, optionsText: 'Name', optionsValue: 'Id', optionsCaption: 'Choose color...'">
                </select>
            </div>
        </div>
        <div>
            <label class="control-label" for="addPersonFruit">
                Fruit</label>
            <div class="controls">
                <select id="addPersonFruit" data-bind="options: AvailableFruits, optionsText: 'Name', optionsValue: 'Id', optionsCaption: 'Choose fruit...'">
                </select>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn close" data-dismiss="modal">Close</a> <a href="#" class="btn btn-primary"
            id="savePerson">Save</a>
    </div>
</div>
<!-- MODAL UPDATE PERSON //-->
<div class="modal hide fade form-horizontal" id="ModalUpdatePerson" data-bind="with:Person">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
            &times;</button>
        <h3>
            Update Person</h3>
    </div>
    <div class="modal-body">
        <div class="control-group">
            <label class="control-label" for="updatePersonName">
                Name</label>
            <div class="controls">
                <input type="text" id="updatePersonName" data-bind="value:Name, valueUpdate:'afterKeyDown'" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="updatePersonAge">
                Age</label>
            <div class="controls">
                <input type="number" id="updatePersonAge" min="10" max="100" step="1" data-bind="value:Age" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="updatePersonAge">
                Gender</label>
            <div class="controls">
                <label for="updatePersonGenderMale">
                    Male</label><input type="radio" checked id="updatePersonGenderMale" name="gender"
                        value="0" />
                <label for="updatePersonGenderFemale">
                    Female</label><input type="radio" id="updatePersonGenderFemale" name="gender" value="1" />
            </div>
        </div>
        <div>
            <label class="control-label" for="updatePersonColor">
                Color</label>
            <div class="controls">
                <select id="updatePersonColor" data-bind="options: $root.AvailableColors, optionsText: 'Name', optionsValue: 'Id', optionsCaption: 'Choose color...', value:FavoriteColorId">
                </select>
            </div>
        </div>
        <div>
            <label class="control-label" for="addPersonFruit">
                Fruit</label>
            <div class="controls">
                <select id="updatePersonFruit" data-bind="options: $root.AvailableFruits, optionsText: 'Name', optionsValue: 'Id', optionsCaption: 'Choose fruit...', value:FavoriteFruitId">
                </select>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn close" data-dismiss="modal">Close</a> <a href="#" class="btn btn-primary"
            id="updatePerson">Save</a>
    </div>
</div>
<!-- MODAL DELETE PERSON //-->
<div class="modal hide fade" id="ModalDeletePerson">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
            &times;</button>
        <h3>
            Confirm Delete of Person</h3>
    </div>
    <div class="modal-body">
        <p>
            Do you really wan to delete <span id="personToDelete"></span>
        </p>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn btn-primary" id="deletePerson">Yes</a>
    </div>
</div>
<!-- MODAL ERROR //-->
<div class="modal hide fade" id="ModalError">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
            &times;</button>
        <h3>
            Whoops, an exception occured</h3>
    </div>
    <div class="modal-body">
        <div class="control-group">
            <label class="control-label" style="font-weight: bold;" for="errorType">
                Type</label>
            <div class="controls">
                <p id="errorType" data-bind="text:Error.Type">
                </p>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" style="font-weight: bold;" for="errorMessage">
                Message</label>
            <div class="controls">
                <p id="errorMessage" data-bind="text:Error.Message">
                </p>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" style="font-weight: bold;" for="errorCustomMessage">
                CustomMessage</label>
            <div class="controls">
                <p id="errorCustomMessage" data-bind="text:Error.CustomMessage">
                </p>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn btn-primary" data-dismiss="modal">Ok</a>
    </div>
</div>
